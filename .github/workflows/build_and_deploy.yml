name: Build & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4.8'

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'server/composer.json'

      - name: Create .env.local from secret
        working-directory: server
        env:
          SYMFONY_DECRYPTION_SECRET: ${{ secrets.SYMFONY_DECRYPTION_SECRET }}
        run: echo "$ENV_SECRET" > .env.local

      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: server
        run: composer validate --no-check-publish && composer update --prefer-dist --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Install dependencies
        working-directory: 'client'
        run: npm install && npm run build && rm -rf node_modules

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    environment:
      name: 'Production'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Check and Install Server Dependencies
        env:
          PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          HOST: ${{ vars.DIGITALOCEAN_HOST }}
          USER: ${{ vars.DIGITALOCEAN_USERNAME }}
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          ssh $USER@$HOST 'which nginx || (sudo apt-get update && sudo apt-get install -y nginx)'
          ssh $USER@$HOST 'which unzip || (sudo apt-get update && sudo apt-get install -y unzip)'

      - name: Deploy to DigitalOcean Droplet
        env:
          PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          HOST: ${{ vars.DIGITALOCEAN_HOST }}
          USER: ${{ vars.DIGITALOCEAN_USERNAME }}
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          ssh $USER@$HOST 'cd /var/www/html && rm -rfv'

          scp -C -v release.zip $USER@$HOST:/var/www/html/

          ssh $USER@$HOST 'cd /var/www/html && unzip -o release.zip && rm release.zip'

          ssh $USER@$HOST 'cd /var/www/html && cp -v nginx.conf /etc/nginx/sites-enabled/default && service nginx restart'
